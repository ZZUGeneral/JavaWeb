<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       				http://www.springframework.org/schema/beans/spring-beans.xsd
       				http://www.springframework.org/schema/context
       				http://www.springframework.org/schema/context/spring-context.xsd
       				http://www.springframework.org/schema/aop
       				http://www.springframework.org/schema/aop/spring-aop.xsd">
<!-- 1 扫描注解类 -->
<context:component-scan base-package="com.zzu.yhl.d_aspect.b_anno"></context:component-scan>
<!-- 2 确定AOP注解生效 -->
<aop:aspectj-autoproxy></aop:aspectj-autoproxy>	
	<!-- 
		<aop:pointcut expression="execution(* com.zzu.yhl.d_aspect.b_anno.UserServiceImpl.*(..) )" id="myPointCut"/>
	 -->
		<!-- 前置通知 
			<aop:before method="myBefore" pointcut="" pointcut-ref=""/>
				method ： 通知，即方法名
				pointcut : 切入点表达式，词表达式只能当前通知使用
				pointcut-ref ： 切入点引用，可以与其他通知共享切入点
			通知方法格式 ：
				public void myBefore(JoinPoint joinPoint);
					参数 1 ： org.aspectj.lang.JoinPoint   用于描述连接点（目标方法）获得目标方法名等
		<aop:before method="myBefore" pointcut-ref="myPointCut"/>
		-->
		
		<!-- 后置通知 : 目标方法后执行，获得返回值
			<aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" />
				returning 通知方法第二个参数的名称
				
				通知格式：
					参数 1 ： org.aspectj.lang.JoinPoint   用于描述连接点（目标方法）获得目标方法名等
					参数2 : 类型Object，参数名returning="ret"配置的
		<aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="ret" />
		 -->
		 
		 <!-- 环绕 通知
		 	<aop:around method="" pointcut-ref="myPointCut"/>
		 	通知方法格式 : public Object myAround(ProceedingJoinPoint joinPoint) throws Throwable 
		 		返回值类型 ： Object
		 		参数 ： org.aspectj.lang.ProceedingJoinPoint
		 		抛出异常
		 	执行目标方法 ： Object obj = joinPoint.proceed();
		 eg : <aop:around method="myAround" pointcut-ref="myPointCut"/>
		 -->
		 <!-- 抛出异常
		 	<aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"/>
		 		thorowing : 通知方法的第二个参数
		 	格式 : public void myAfterThrowing(JoinPoint joinPoint,Throwable e)
		 		参数1 ： 连接点的描述对象
		 		参数2 ：获得异常信息的，类型 Throwable ，参数名由thorowing="e"配置
		 <aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"/>
		  -->
		  <!-- 最终通知
		   <aop:after method="myAfter" pointcut-ref="myPointCut"/>
		   -->
</beans>
